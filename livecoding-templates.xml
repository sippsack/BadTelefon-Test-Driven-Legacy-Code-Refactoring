<?xml version="1.0" encoding="UTF-8" standalone="no"?><templates><template autoinsert="true" context="java" deleted="false" description="Golden Master - TarifeRunnerTests" enabled="true" name="lc1-gm1">	private PrintStream originalSysOut;&#13;
	private ByteArrayOutputStream consoleStream;&#13;
&#13;
	@Before&#13;
	public void init() {&#13;
		originalSysOut = System.out;&#13;
		consoleStream = new ByteArrayOutputStream();&#13;
		PrintStream printStream = new PrintStream(consoleStream);&#13;
	    System.setOut(printStream);&#13;
	}&#13;
&#13;
	@Test&#13;
	public void testSimpleOutput() {&#13;
		System.out.println("Hallo Publikum!");&#13;
		System.out.print("Hallo Falk!");&#13;
		assertEquals("Hallo Publikum!\r\nHallo Falk!", consoleStream.toString());&#13;
	}&#13;
&#13;
	@After&#13;
	public void teardown() {&#13;
		System.setOut(originalSysOut);&#13;
	}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="Golden Master mit Approval Tests" enabled="true" name="lc1-gm2">	@Test&#13;
	public void testRunnerWithApprovals() throws Exception {&#13;
		System.out.println("Hallo Publikum!");&#13;
		System.out.print("Hallo Falk!");&#13;
//		TarifeRunner.main(null);&#13;
		Approvals.verify(consoleStream.toString());&#13;
	}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="Sprout Method - test without discount" enabled="true" name="lc10-sprout1">	@Test&#13;
	public void testKundeOhneRabatt() {&#13;
		Kunde kunde = new Kunde(Tarif.PRIVAT);&#13;
		assertEquals(0.0, kunde.getGebuehr(), 0.001);&#13;
		kunde.account(2, 12, 30);&#13;
		assertEquals(1.99, kunde.getGebuehr(), 0.001);&#13;
	}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="Sprout Method - testcase with discount" enabled="true" name="lc10-sprout2">	@Test&#13;
	public void testKundeMit10ProzentRabatt() throws Exception {&#13;
		Kunde kunde = new Kunde(Tarif.PRIVAT, new Rabatt(10));&#13;
		assertEquals(0.0, kunde.getGebuehr(), 0.001);&#13;
		kunde.account(2, 12, 30);&#13;
		assertEquals(1.791, kunde.getGebuehr(), 0.001);&#13;
	}	&#13;
</template><template autoinsert="true" context="java" deleted="false" description="New constructor taking discount object." enabled="true" name="lc10-sprout3">	private Rabatt rabatt;&#13;
	&#13;
	public Kunde(int tarifArt) {&#13;
		this(tarifArt, new Rabatt(0));&#13;
	}&#13;
	&#13;
	public Kunde(int tarifArt, Rabatt rabatt) {&#13;
		this.tarif = new Tarif(tarifArt);&#13;
		this.rabatt = rabatt;&#13;
	}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="Call of discount calculation" enabled="true" name="lc10-sprout4">		preis = rabatt.berechneNetto(preis);&#13;
</template><template autoinsert="true" context="java" deleted="false" description="Subclass for test with overridden saveCall() and check for price." enabled="true" name="lc10-sprout5">	@Test&#13;
	public void testKundeMit10ProzentRabattUndSpeichernMock() throws Exception {&#13;
		Kunde kunde = new Kunde(Tarif.PRIVAT, new Rabatt(10)) {&#13;
			@Override&#13;
			protected void saveCall(int minuten, int stunde, int minute, double preis) {&#13;
				// nichts tun &#13;
				// oder Werte abprüfen&#13;
				assertEquals(1.791, preis, 0.001);&#13;
			}&#13;
		};&#13;
		kunde.account(2, 12, 30);&#13;
	}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="Refactoring: extract creation with price check" enabled="true" name="lc10-sprout6">	@Test&#13;
	public void testKundeMit10ProzentRabattAndSaveMock() throws Exception {&#13;
		createKundeWithMockedSave(1.791).account(2, 12, 30);&#13;
	}&#13;
	&#13;
	private Kunde createKundeWithMockedSave(double erwarteterPreis) {&#13;
		Kunde kunde = new Kunde(Tarif.PRIVAT, new Rabatt(10)) {&#13;
			@Override&#13;
			protected void saveCall(int minuten, int stunde, int minute, double preis) {&#13;
				assertEquals(erwarteterPreis, preis, 0.001);&#13;
			}&#13;
		};&#13;
		return kunde;&#13;
	}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="Subklasse mit überschriebenem Seam" enabled="true" name="lc2-sc1">	private class TarifeRunnerForTest extends TarifeRunner {&#13;
		@Override&#13;
		protected Random getRandom() {&#13;
			return new Random(42);&#13;
		}&#13;
	}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="Test method for pure static function isMondschein" enabled="true" name="lc3-pure1">	@Test&#13;
	public void testMondschein() {&#13;
		assertEquals(true, Kunde.isMondschein(0));&#13;
		assertEquals(true, Kunde.isMondschein(8));&#13;
&#13;
		assertEquals(false, Kunde.isMondschein(9));&#13;
		assertEquals(false, Kunde.isMondschein(12));&#13;
		assertEquals(false, Kunde.isMondschein(17));&#13;
		assertEquals(false, Kunde.isMondschein(18));&#13;
&#13;
		assertEquals(true, Kunde.isMondschein(19));&#13;
		assertEquals(true, Kunde.isMondschein(23));&#13;
		assertEquals(true, Kunde.isMondschein(24));&#13;
		assertEquals(true, Kunde.isMondschein(30));&#13;
		assertEquals(true, Kunde.isMondschein(-1));&#13;
	}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="Extract class - StringOutputTests" enabled="true" name="lc5-ec1">	@Test&#13;
	public void testOutputToString() {&#13;
		StringOutputter stringOutput = new StringOutputter();&#13;
		stringOutput.writeLine("hello world");&#13;
		assertEquals("hello world\r\n", stringOutput.toString());&#13;
	}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="Extract class - StringOutputter" enabled="true" name="lc5-ec2">	private StringWriter stringWriter = new StringWriter();&#13;
	private PrintWriter printWriter = new PrintWriter(stringWriter);&#13;
	&#13;
	@Override&#13;
	public void writeLine(String message) {&#13;
		printWriter.println(message);&#13;
	}&#13;
	&#13;
	@Override&#13;
	public String toString() {&#13;
		return stringWriter.toString();&#13;
	}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="Dependendy Inversion - KundeTests" enabled="true" name="lc6-di1">	@Test&#13;
	public void testAccount() {&#13;
		Outputter stringOutputter = new StringOutputter();&#13;
		Kunde kunde = new Kunde(Tarif.BUSINESS);&#13;
		kunde.setOutputter(stringOutputter);&#13;
		kunde.account(10, 12, 35);&#13;
		assertEquals(&#13;
				"Berechne Gespräch mit 10 min um 12:35 mit Tarif 1\r\n" + "Preis für das Gespräch: 12,90\r\n"&#13;
						+ "Gesamtgebühr nach Gespräch um 12:35 (Mondscheinzeit: false): 12,90\r\n",&#13;
				stringOutputter.toString());&#13;
	}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="Dependency Inversion - Kunde Constructor Injection" enabled="true" name="lc6-di2">	public Kunde(int tarifArt, Outputter outputter) {&#13;
		this(tarifArt);&#13;
		this.outputter = outputter;&#13;
	}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="Test private methods" enabled="true" name="lc7-pm1">	@Test&#13;
	public void testMondschein() {&#13;
		assertEquals(true, invokeIsMondschein(0));&#13;
		assertEquals(true, invokeIsMondschein(8));&#13;
&#13;
		assertEquals(false, invokeIsMondschein(9));&#13;
		assertEquals(false, invokeIsMondschein(12));&#13;
		assertEquals(false, invokeIsMondschein(17));&#13;
		assertEquals(false, invokeIsMondschein(18));&#13;
&#13;
		assertEquals(true, invokeIsMondschein(19));&#13;
		assertEquals(true, invokeIsMondschein(23));&#13;
		assertEquals(true, invokeIsMondschein(24));&#13;
		assertEquals(true, invokeIsMondschein(30));&#13;
		assertEquals(true, invokeIsMondschein(-1));&#13;
	}&#13;
	&#13;
	private boolean invokeIsMondschein(int hour) {&#13;
		try {&#13;
			Method method = Kunde.class.getDeclaredMethod("isMondschein", Integer.TYPE);&#13;
			method.setAccessible(true);&#13;
			return (boolean) method.invoke(null, hour);&#13;
		} catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException e) {&#13;
			e.printStackTrace();&#13;
		}&#13;
		return false;&#13;
	}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="Test private method mit Whitebox PowerMock" enabled="true" name="lc7-pm2">	@Test&#13;
	public void testMondscheinWithWhitebox() throws Exception {&#13;
		assertEquals(true, Whitebox.invokeMethod(Kunde.class, "isMondschein", 8));&#13;
		assertEquals(false, Whitebox.&lt;Boolean&gt; invokeMethod(Kunde.class, "isMondschein", 9));&#13;
	}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="Test private method mit BoundBox" enabled="true" name="lc7-pm3">	&#13;
	@Test&#13;
	@BoundBox(boundClass = Kunde.class)&#13;
	public void testMondscheinWithBoundBox() {&#13;
		assertEquals(true, BoundBoxOfKunde.isMondschein(0));&#13;
	}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="Mock for Outputter" enabled="true" name="lc8-mock1">	// move above class declaration !!!&#13;
	import static org.mockito.Mockito.*;&#13;
	@RunWith(MockitoJUnitRunner.class)&#13;
&#13;
	private Outputter outputterMock;&#13;
&#13;
	@Before&#13;
	public void init() {&#13;
		outputterMock = Mockito.mock(Outputter.class);&#13;
	}&#13;
	&#13;
	@Test&#13;
	public void testAccountWithBusinessTarif() {&#13;
		new Kunde(Tarif.BUSINESS, outputterMock).account(10, 12, 35);&#13;
		verify(outputterMock).writeLine("Berechne Gespräch mit 10 min um 12:35 mit Tarif 1");&#13;
		verify(outputterMock).writeLine("Preis für das Gespräch: 12,90");&#13;
		verify(outputterMock).writeLine("Gesamtgebühr nach Gespräch um 12:35 (Mondscheinzeit: false): 12,90");&#13;
		verifyNoMoreInteractions(outputterMock);&#13;
	}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="Second test with other input tarif" enabled="true" name="lc8-mock2">	@Test&#13;
	public void testAccountWithPrivatTarif() {&#13;
		new Kunde(Tarif.PRIVAT, outputterMock).account(10, 12, 35);&#13;
		verify(outputterMock).writeLine("Berechne Gespräch mit 10 min um 12:35 mit Tarif 0");&#13;
		verify(outputterMock).writeLine("Preis für das Gespräch: 17,91");&#13;
		verify(outputterMock).writeLine("Gesamtgebühr nach Gespräch um 12:35 (Mondscheinzeit: false): 17,91");&#13;
		verifyNoMoreInteractions(outputterMock);&#13;
	}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="Comment with TDD todo list" enabled="true" name="lc9-tdd1">/**&#13;
 * TODO&#13;
 * ----&#13;
 * 1. Rabatt-Klasse mit Prozentsatz&#13;
 * 2. 10 % Rabatt =&gt; berechnePreis liefert 90 % vom Preis zurück&#13;
 * 3. kein Rabatt =&gt; berechnePreis liefert gleichen Wert zurück&#13;
 * 4. ignoriere negative Rabatte =&gt; berechnePreis liefert gleichen Wert zurück&#13;
 *&#13;
 */</template><template autoinsert="true" context="java" deleted="false" description="First test (create discount)" enabled="true" name="lc9-tdd2">	@Test&#13;
	public void testErzeugeRabatt() throws Exception {&#13;
		Rabatt rabatt = new Rabatt(10);&#13;
		assertEquals(10, rabatt.getProzentsatz());&#13;
	}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="Second test (calculate 10 percent discount)" enabled="true" name="lc9-tdd3">	@Test&#13;
	public void testBerechne10ProzentRabatt() throws Exception {&#13;
		Rabatt rabatt = new Rabatt(10);&#13;
		assertEquals(9.0, rabatt.berechneNetto(10.0), 0.001);&#13;
	}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="Third test (calculate 0 percent discount)" enabled="true" name="lc9-tdd4">	@Test&#13;
	public void testBerechnePreisOhneRabatt() throws Exception {&#13;
		assertEquals(10.0, createRabatt(0).berechneNetto(10.0), 0.001);&#13;
	}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="Real Implementation of berechneNetto" enabled="true" name="lc9-tdd5">		return (100 - prozentsatz) * brutto / 100;&#13;
</template><template autoinsert="true" context="java" deleted="false" description="Fourth test (ignore negative discount)" enabled="true" name="lc9-tdd6">	@Test&#13;
	public void testIgnoreNegativenRabatt() throws Exception {&#13;
		assertEquals(10.0, createRabatt(-20).berechneNetto(10.0), 0.001);&#13;
	}&#13;
</template><template autoinsert="true" context="java" deleted="false" description="ignore negative discounts" enabled="true" name="lc9-tdd7">		this.prozentsatz = Math.max(0, prozentsatz);</template></templates>